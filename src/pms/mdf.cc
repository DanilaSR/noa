/*
 * BSD 2-Clause License
 *
 * Copyright (c) 2021, Roland Grinis, GrinisRIT ltd. (roland.grinis@grinisrit.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#include "xml.hh"
#include "noa/pms/mdf.hh"

using namespace noa::pms;
using namespace noa::pms::mdf;

std::optional<Settings> noa::pms::mdf::parse_settings(
        const GeneratorName &generated_by, const MDFFilePath &mdf_path)
    {
        auto mdf_doc = Document{};
        if (!mdf_doc.load_file(mdf_path.string().c_str()))
        {
            std::cerr << "Cannot load XML " << mdf_path << std::endl;
            return std::nullopt;
        }
        auto rnode = mdf_doc.child(generated_by.c_str());
        if (!rnode)
        {
            std::cerr << "MDF file not generated by " << generated_by
                      << std::endl;
            return std::nullopt;
        }

        auto element_xnodes = rnode.select_nodes("element[@name][@Z][@A][@I]");
        auto nelem = element_xnodes.size();
        if (!nelem)
        {
            std::cerr << "No atomic elements found in " << mdf_path
                      << std::endl;
            return std::nullopt;
        }
        auto elements = Elements{};
        for (const auto &xnode : element_xnodes)
        {
            auto node = xnode.node();
            elements.emplace(node.attribute("name").value(),
                             AtomicElement{node.attribute("A").as_double(),
                                           node.attribute("I").as_double(),
                                           node.attribute("Z").as_int()});
        }

        auto material_xnodes =
            rnode.select_nodes("material[@name][@file][@density]");
        auto nmtr = material_xnodes.size();
        if (!nmtr)
        {
            std::cerr << "No materials found in " << mdf_path << std::endl;
            return std::nullopt;
        }
        auto materials = Materials{};
        for (const auto &xnode : material_xnodes)
        {
            auto node = xnode.node();
            auto name = node.attribute("name").value();
            auto comps = get_mdf_components<MaterialComponents>(
                node, elements, name);
            if (!comps.has_value())
            {
                std::cerr << "Material components not consistent in "
                          << mdf_path << std::endl;
                return std::nullopt;
            }
            materials.try_emplace(name, node.attribute("file").value(),
                                  node.attribute("density").as_double(), *comps);
        }

        auto composite_xnodes = rnode.select_nodes("composite[@name]");
        auto composites = Composites{};
        for (const auto &xnode : composite_xnodes)
        {
            auto node = xnode.node();
            auto name = node.attribute("name").value();
            auto comps =
                get_mdf_components<Composite>(node, materials, name);
            if (!comps.has_value())
            {
                std::cerr << "Composite components not consistent in "
                          << mdf_path << std::endl;
                return std::nullopt;
            }
            composites.emplace(name, *comps);
        }

        return std::make_optional<Settings>(elements, materials, composites);
    }